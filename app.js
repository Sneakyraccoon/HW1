/*
1. Задача про рекурсію 

Напишіть функцію яка рекурсивно буде знаходити суму всіх непарних додатніх чисел до якогось числа.

Приклад:

function recursiveOddSumTo(number) {

// тут ваш код

};

console.log(recursiveOddSumTo(1)) // 1
console.log(recursiveOddSumTo(10)) // 25
*/

// Попросимо користувача ввести число від 0 до 100
let number = prompt("Please enter an integer from 0 to 100", 0);

// Перетворимо значення, яке ввів користувач, щоб точно отримати намбер
number = Number.parseInt(number, 10);

// Якщо користувач ввів не намбер (NaN), або не додатнє число- видамо повідомлення
if (isNaN(number) || number < 0) {
    alert("Таке чуство шо Бог десь наказує нас за шось");
  }

  console.log(number);

// Напишимо ф-цію, яка робить суму усіх непарних додатніх чисел від 0 до 'X'
// Наприклад, якщо  'X' = 10, то функція має повернути 9 + 7 + 5 + 3 + 1 = 25
// При цьому, використавши "рекурсію", тобто викликавши саму себе в середині ф-ції
  function sumOddNumbers(x) {

    // Attention! 
    // При пеших спробах запустити цю ф-цію в браузері, отримував помилку:
    // “Maximum call stack size exceeded”
    // Погугливиши, зрозумів шо це через те шо ф-ція не може завершитись, бо немає виходу з неї.
    // Для виходу з ф-ції додав таку умову: Якщо Х < 0 (ми перебрали всі значення від Х до 0), то виходимо.
 
        if (x < 0) {
          return 0;
          }

    // Перевіка на непарність. Тут вираховується чи є 'X' непарним. (Умова вірна, якщо остаток ділення X на 2 не дорівнює 0)
    // Якщо 'X' є непарним, isOdd буде = True, якщо 'X' є парним, isOdd буде = false
    const isOdd = x % 2 !== 0;

    // Якщо isOdd = True (тобто X - є непарним числом), то в реторні ми повернимо 'X' + значення, яке нам поверне наша ф-ція для "X - 1"
    // Якщо isOdd = False (тобто X - є парним числом), то в реторні ми повернимо '0' + значення, яке нам поверне наша ф-ція для "X - 1"
    // Таким чином, в доданках ми завжди будемо мати або непарне число або 0. Отже Ф-ція поверне суму всіх непарних чисел від 0 до "X"
    return (isOdd ? x : 0) + sumOddNumbers(x - 1);
// Іншими словами, ця ф-ція рекурсивно зменьшує значення змінної, перевіряючи кожне нове зменшене значення на непарність і додає його до загальної суми
}

console.log(sumOddNumbers(number));

/*
 2. Задача про ітерацію

Напишіть функцію яка ітеративно (в циклі) буде знаходити суму всіх непарних додатніх чисел до якогось числа.

Приклад:

function iterativeOddSumTo(number) {

// тут ваш код

};

console.log(iterativeOddSumTo(1)) // 1
console.log(iterativeOddSumTo(10)) // 25

*/

// Напишимо ф-цію, яка в циклі від 0 до Y буде перевіряти (за допомогою лічильника ітерацій) чи є число непарним і якщо так, додаватиме його до загальної суми
function iterativeOddSumTo(y) {
  let oddSum = 0; // В цю змінну будемо складати суму всіх непарних чисел від 0 до Y
  for (let i = 0; i <= y; i++) {  // Задаєм початкове значення лічильника i = 0. Поки Лічильник менший або дорівнює Y - виконуємо цикл. При кожній ітераціїї додаємо 1 до лічильника
      if (i % 2 !== 0) { // Перевірка на непарність. Якщо залишок ділення і на 2 не дорівнює 0 (непарне число), умова виконана
        oddSum += i; // Додаєм до змінної oddSum значення і (яке як ми перевірили є непарним)
      }
  }
  return oddSum;
}

console.log(iterativeOddSumTo(number));