
// 1. Задача на повернення ініціалів для кожного імені з масиву, посортованих в алфавітному порядку: 

// Рішення має працювати незалежно від конкретних значень в масиві імен

// const userNames = ["Петрик Ольга Іванівна", "Гнатюк Петро Антонович", "Рудко Андрій Опанасович"];
// let initials;

// // тут ваш код ...

// console.log(initials); // [ "Г.П.А.", "П.О.І.", "Р.А.О."]


 const userNames = ["Петрик Ольга Іванівна", "Гнатюк Петро Антонович", "Рудко Андрій Опанасович"];


// Напишимо ф-цію, яка перетворює імена з масиву на ініціали і потім сортує їх
// Спочатку використаємо для нашої ф-ції метод forEach — це метод масивів, який дозволяє виконати певну ф-цію один раз для кожного елементу масива
 function getSortedInitials(names) {
      // Перетворимо кожне ім'я з масиву "names" на ініціали. Для цього використаємо:
      // 1. Метод "map", який створить новий масив.
      //      Метод "map" в кожній ітерації буде брати новий об'єкт з масиву "names" і класти його в змінну "name".
      //      В 1й ітерації name = "Петрик Ольга Іванівна", в 2й name = "Гнатюк Петро Антонович" ітд
      //      Змінна "name" передається у "стрілочну" ф-цію, яка використає методи "split" і "foreach".
      // 2. Метод "split", який розіб'є змінну "name" по пробілу (' ') і покладе нові розбиті значення в масив nameParts
      //      В 1й ітерації nameParts = ["Петрик", "Ольга", "Іванівна"], в 2й nameParts = ["Гнатюк", "Петро", "Антонович"] ітд
      // 3. Метод forEach, який перебере кожен елемент нового масиву nameParts, передасть його значення в змінну part
      //      В 1й ітерації part =  "Петрик", в 2й part = "Ольга", в 3й part = "Іванівна" ітд.
      //      Змінна "part"  передається у "стрілочну" ф-цію, яка до змінної "initials" додає перший символ змінної "part" у аперкейсі
      const initials = names.map(name => {
        const nameParts = name.split(' ');
        let initials = '';
        nameParts.forEach(part => {
            initials += part[0].toUpperCase();
        });
        return initials; // Це "внутрішній реторн" з методу "map" це поки що не реторн із усієї ф-ції
    });
    return initials.sort(); // А це вже "зовнішній реторн", який повертає результат роботи усієї ф-ції  (масив відсортованих ініціалів)
 }

 console.log(getSortedInitials(userNames)); // ГПА ПОІ РАО

// 2. Задача на фільтрування масиву

// Реалізуйте фільтрування імен які починаються з голосної двома способами:

// через умовну конструкцію
// через вбудований метод масивів


// Рішення має працювати незалежно від конкретних значень в масиві імен

// const userNames = ['Петро', 'Емма', 'Юстин', 'Ілля', 'Марта', 'Яна', 'Василь', 'Антон', 'Олена'];
// let filteredNames;

// // тут ваш код...

// console.log(filteredNames); // ['Емма', 'Юстин', 'Ілля', 'Яна', 'Антон', 'Олена']

const userNames2 = ['Петро', 'Емма', 'Юстин', 'Ілля', 'Марта', 'Яна', 'Василь', 'Антон', 'Олена', 'ірина', 'аліса']; // Додамо імена з маленької літери

// Оголосимо масив, який містить всі голосні букви укр. алфавіту:
const vowels = ['А', 'Е', 'И', 'І', 'О', 'У', 'Я', 'Ю', 'Є', 'Ї','а', 'е', 'и', 'і', 'о', 'у', 'я', 'ю', 'є', 'ї' ];


// А) Рішення через умовну конструкцію 
// Напишемо ф-цію, яка відфільтрує масив "names" і поверне новий масив, в якому будуть тількі ті імена, які починаються з голосної.
function vowelFilter1(names) {
  let filtered1 = []; // оскільки ми не використовуємо вбудований метод масивів "filter" у цьому випадку, нам треба оголосити новий масив вручну 
  for (let i = 0; i < names.length; i++) { // Напишемо цикл у довжину масиву (тобто стільки ітерацій скільки обєктів в масиві)
      let name = names[i];  // у змінну "name" запишимо обєкт масиву, що відповідає номеру потосної ітерації (починаючи з 0, бо ми читаємо індекс масива)
      if (vowels.includes(name[0])) { // Якщо змінна "vowels" містить першу літеру змінної "name" (тобто "name" починається з голосної)
        filtered1.push(name); // тоді ми складаємо "name" в новий масив "filtered1"
      }
  }
  return filtered1;
}


// В) Рішення через вбудований метод масивів 
// Напишемо ф-цію, яка відфільтрує масив "names" і поверне новий масив, в якому будуть тількі ті імена, які починаються з голосної.
function vowelFilter2(names) {
  // Використаємо метод "filter", який створить новий масив 
  // filter перебере по чрезі всі елементи масиву (Петро, Емма ітд) 
  // до нового масиву метод filter покладе тільки ті значення, які відповідають умові (=true) у душках (name => vowels.includes(name[0])) 
  // умова у душках - це стрілочна ф-ція, вхідним аргументом якоъ э змінна "name", яка буде містити по черзі всі значення масиву ( 1-ша ітерація - Петро, 2-га ітерація - Емма ітд) 
  // Значення умови: Якщо масив "vowels" містить в собі першу літеру змінної "name", то умова = true, інакше = false.
  return names.filter(name => vowels.includes(name[0]));
}

console.log(vowelFilter1(userNames2));
console.log(vowelFilter2(userNames2));



// 3. Задача на розворот числа:

// const currentMaxValue = 4589;
// let reverseMaxValue;

// // тут ваш код...

// console.log(reverseMaxValue); // 9854
// console.log(typeof reverseMaxValue); // 'number'

// В JS можна розвернути масив за допомогою вбудованого метода "reverse"
// тому нам треба перетворити наш num на стірнг за допомогою метода toString()
// потім стрінг пететворити на масив - за допомогою метода split(''), який поверне масив, у якому включені всі наші цифри зі стрінга "4589" - ["4", "5", "8", "9"]
// потім застосувати метод reverse(), який переверне масив  ["4", "5", "8", "9"] -> ["9", "8", "5", "4"]
// потім метод join() обєднає едементи перевернутого масиву у стрінг ["9", "8", "5", "4"] ->  "9854"
// потім стрінг перетворити на num за допомогою метода parseInt(стрінг, 10);

const currentMaxValue = 4589;

function reverseNumber(num) {
  // Нум -> в стрінг
  let newString = num.toString();
  
  // Стрінг -> в масив
  let newArray = newString.split('');
  
  // Розвертаємо масив
  let newReversedArray = newArray.reverse();
  
  // Обєднуємо всі елементи масиву в стрінг
  let newReversedString = newReversedArray.join('');
  
  // перетворюємо стрінг на нум
  let reversedNum = parseInt(newReversedString, 10);
  
  return reversedNum;
}

console.log(reverseNumber(currentMaxValue));

// Знайшов в гуглі більш крутий варіант запису:
function reverseNumber2(num) {
// тут ми одразу викликаємо один за одним всі методи  toString  split reverse join в середині ф-ції parseInt
  return parseInt(num.toString().split('').reverse().join(''), 10);
  
  return reversedNum;
}

console.log(reverseNumber2(currentMaxValue));
 
// 4. Задача на знаходження добутку масиву чисел з невідомою глибиною вкладеності:

// const resultsArray = [1, 2, [3, [4]]];
// let productOfArray;

// // тут ваш код...

// console.log(productOfArray); // 24
